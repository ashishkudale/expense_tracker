// Mocks generated by Mockito 5.4.6 from annotations
// in expense_tracker/test/features/categories/presentation/pages/categories_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:expense_tracker/core/utils/result.dart' as _i3;
import 'package:expense_tracker/features/categories/domain/entities/category.dart'
    as _i9;
import 'package:expense_tracker/features/categories/domain/repositories/category_repository.dart'
    as _i12;
import 'package:expense_tracker/features/categories/domain/usecases/add_category.dart'
    as _i8;
import 'package:expense_tracker/features/categories/domain/usecases/delete_category.dart'
    as _i10;
import 'package:expense_tracker/features/categories/domain/usecases/get_categories_by_type.dart'
    as _i11;
import 'package:expense_tracker/features/categories/presentation/bloc/categories_bloc.dart'
    as _i4;
import 'package:expense_tracker/features/categories/presentation/bloc/categories_event.dart'
    as _i6;
import 'package:expense_tracker/features/categories/presentation/bloc/categories_state.dart'
    as _i2;
import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCategoriesState_0 extends _i1.SmartFake
    implements _i2.CategoriesState {
  _FakeCategoriesState_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeResult_1<T> extends _i1.SmartFake implements _i3.Result<T> {
  _FakeResult_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CategoriesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoriesBloc extends _i1.Mock implements _i4.CategoriesBloc {
  MockCategoriesBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoriesState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeCategoriesState_0(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i2.CategoriesState);

  @override
  _i5.Stream<_i2.CategoriesState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i2.CategoriesState>.empty(),
          )
          as _i5.Stream<_i2.CategoriesState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i6.CategoriesEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i6.CategoriesEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i2.CategoriesState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i6.CategoriesEvent>(
    _i7.EventHandler<E, _i2.CategoriesState>? handler, {
    _i7.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i7.Transition<_i6.CategoriesEvent, _i2.CategoriesState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void onChange(_i7.Change<_i2.CategoriesState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AddCategory].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddCategory extends _i1.Mock implements _i8.AddCategory {
  MockAddCategory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Result<_i9.Category>> call({
    required String? name,
    required _i9.CategoryType? type,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {#name: name, #type: type}),
            returnValue: _i5.Future<_i3.Result<_i9.Category>>.value(
              _FakeResult_1<_i9.Category>(
                this,
                Invocation.method(#call, [], {#name: name, #type: type}),
              ),
            ),
          )
          as _i5.Future<_i3.Result<_i9.Category>>);
}

/// A class which mocks [DeleteCategory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteCategory extends _i1.Mock implements _i10.DeleteCategory {
  MockDeleteCategory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Result<bool>> call(String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [categoryId]),
            returnValue: _i5.Future<_i3.Result<bool>>.value(
              _FakeResult_1<bool>(this, Invocation.method(#call, [categoryId])),
            ),
          )
          as _i5.Future<_i3.Result<bool>>);
}

/// A class which mocks [GetCategoriesByType].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCategoriesByType extends _i1.Mock
    implements _i11.GetCategoriesByType {
  MockGetCategoriesByType() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Result<List<_i9.Category>>> call(_i9.CategoryType? type) =>
      (super.noSuchMethod(
            Invocation.method(#call, [type]),
            returnValue: _i5.Future<_i3.Result<List<_i9.Category>>>.value(
              _FakeResult_1<List<_i9.Category>>(
                this,
                Invocation.method(#call, [type]),
              ),
            ),
          )
          as _i5.Future<_i3.Result<List<_i9.Category>>>);
}

/// A class which mocks [CategoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryRepository extends _i1.Mock
    implements _i12.CategoryRepository {
  MockCategoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Result<List<_i9.Category>>> getCategories() =>
      (super.noSuchMethod(
            Invocation.method(#getCategories, []),
            returnValue: _i5.Future<_i3.Result<List<_i9.Category>>>.value(
              _FakeResult_1<List<_i9.Category>>(
                this,
                Invocation.method(#getCategories, []),
              ),
            ),
          )
          as _i5.Future<_i3.Result<List<_i9.Category>>>);

  @override
  _i5.Future<_i3.Result<List<_i9.Category>>> getCategoriesByType(
    _i9.CategoryType? type,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCategoriesByType, [type]),
            returnValue: _i5.Future<_i3.Result<List<_i9.Category>>>.value(
              _FakeResult_1<List<_i9.Category>>(
                this,
                Invocation.method(#getCategoriesByType, [type]),
              ),
            ),
          )
          as _i5.Future<_i3.Result<List<_i9.Category>>>);

  @override
  _i5.Future<_i3.Result<_i9.Category>> addCategory(_i9.Category? category) =>
      (super.noSuchMethod(
            Invocation.method(#addCategory, [category]),
            returnValue: _i5.Future<_i3.Result<_i9.Category>>.value(
              _FakeResult_1<_i9.Category>(
                this,
                Invocation.method(#addCategory, [category]),
              ),
            ),
          )
          as _i5.Future<_i3.Result<_i9.Category>>);

  @override
  _i5.Future<_i3.Result<bool>> deleteCategory(String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCategory, [categoryId]),
            returnValue: _i5.Future<_i3.Result<bool>>.value(
              _FakeResult_1<bool>(
                this,
                Invocation.method(#deleteCategory, [categoryId]),
              ),
            ),
          )
          as _i5.Future<_i3.Result<bool>>);

  @override
  _i5.Future<_i3.Result<bool>> isCategoryInUse(String? categoryId) =>
      (super.noSuchMethod(
            Invocation.method(#isCategoryInUse, [categoryId]),
            returnValue: _i5.Future<_i3.Result<bool>>.value(
              _FakeResult_1<bool>(
                this,
                Invocation.method(#isCategoryInUse, [categoryId]),
              ),
            ),
          )
          as _i5.Future<_i3.Result<bool>>);
}
